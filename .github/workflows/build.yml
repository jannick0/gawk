name: build and check

on:
  push:
    branches-ignore:
      - workflow
  pull_request:
  workflow_dispatch:
  workflow_run:
    workflows:
      - "Update repo from Savannah upstream"
    types:
      - completed

jobs:
  build-check-msys2:
    strategy:
      fail-fast: false
      matrix:
        #msystem: [MSYS, MINGW32, MINGW64, CLANG32, CLANG64]
        msystem: [MSYS]

    name: ${{ matrix.msystem }}
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0

      - name: Prepare MSYS2 system
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: git base-devel autotools pactoys
          update: true
          path-type: minimal

      # Unfortunately the required packages cannot be passed through the
      # previous step using 'install' and 'pacboy' given that both systems
      # MSYS and non-MSYS are run
      - name: Install packages
        run: |
          case "$MSYSTEM" in
            (MSYS) pacman -S --noconfirm --needed gcc gettext-devel libreadline-devel mpfr-devel ;;
            (*)    pacboy -S --noconfirm --needed gcc:p gettext:p make:p mpfr:p readline:p ;;
          esac

      - name: Configure system
        run: |
          ./bootstrap.sh

          # get version string from git repo
          git_version=$(git describe --dirty --tags)
          echo "git version: $git_version."
          echo 'const char *version_string = "'"$git_version"'";' > 'version.c'
          echo "GAWK_GIT_VERSION='$git_version'" >> $GITHUB_ENV

          # prepare build system
          case "$MSYSTEM" in
            (MSYS) autoreconf -vfi
                  # we prefer to test a VPATH build
                  mkdir -p build
                  cd build
                  ../configure -C --without-libiconv-prefix --without-libintl-prefix --without-libsigsegv
                  for e in log cache h; do
                    echo "'config.$e':"
                    cat "config.$e"
                  done
                  ;;
            (*) cp -v pc/{Makefile,*.h,*.c,testoutcmp.awk} .
                cp -v pc/Makefile.ext ./extension/Makefile
                cp -v pc/Makefile.tst ./test/Makefile
                  ;;
          esac

      - name: Build gawk app and extensions
        run: |
          case "$MSYSTEM" in
            (MSYS)  cd build
                    make V=0 CFLAGS='-Wall -Wextra' || { ret=$?; make V=1; cat config.log; cat config.cache; exit $ret; }
                  ;;
            (*) MYCFLAGS='-pedantic -Wall'
                # MinGW-specifics: do not define type BOOL, because GAWK infringes the Windows name space
                # cf. https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/mingw-w64-headers/include/minwindef.h#l130
                MYCFLAGS="$MYCFLAGS -D_NO_BOOL_TYPEDEF"
                mingw32-make mingw32-readline-mpfr MYCFLAGS="$MYCFLAGS"
                make -C extension extensions
                ;;
          esac

      - name: Run checks
        run: |
          case "$MSYSTEM" in
            (MSYS) make -C build check;;
            (*) LC_ALL=C LC_LOCALE=C make -C test check;;
          esac

      - name: Run distcheck (autoconf only)
        run: |
          case "$MSYSTEM" in
            (MSYS) make -C build distcheck DISTCHECK_CONFIGURE_FLAGS="--without-libiconv-prefix --without-libintl-prefix --without-libsigsegv";;
            (*) exit 0;;
          esac


  build-check-unix:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0

      - name: Install packages
        run: |
          # install optional packages and set configure flags
          configure_flags=''
          case '${{ matrix.os }}' in
            (ubuntu-*) sudo apt update
                    sudo apt install gettext autopoint libmpfr-dev libeditreadline-dev
                    # fingers crossed that this upgrades all packages to the highest version available
                    sudo apt upgrade
                    ;;
            (macos-*)  # NB mpfr and readline installed per default
                    brew update
                    # https://stackoverflow.com/questions/12607155/error-the-brew-link-step-did-not-complete-successfully
                    brew unlink node
                    brew upgrade
                    brew install automake gettext coreutils gawk grep gnu-sed
                    # make the app versions without leading character 'g' available on PATH
                    for p in coreutils grep gnu-sed; do
                      export PATH="/usr/local/opt/$p/libexec/gnubin:$PATH"
                    done
                    # ... and make the extended PATH available to subsequent steps
                    echo "PATH=$PATH" >> "$GITHUB_ENV"
                    ;;
          esac

      - name: Configure
        run: |
          # get version string from git repo
          git_version=$(git describe --dirty --tags)
          echo "GIT version: $git_version."
          echo 'const char *version_string = "'"$git_version"'";' > 'version.c'
          echo "GAWK_GIT_VERSION='$git_version'" >> $GITHUB_ENV

          # boostrap
          ./bootstrap.sh

          # prepare build system
          autoreconf -vfi

          # we prefer to test a VPATH build
          mkdir -p build
          cd build
          GAWK_CONFIG_FLAGS=''
          case '${{ matrix.os }}' in
            (ubuntu-*) ;;
            (macos-*) GAWK_CONFIG_FLAGS+=' -C';;
          esac
          ../configure $GAWK_CONFIG_FLAGS
          for e in log cache; do
            f="config.$e"
            if test -f "$f"; then
              echo "'$f':"
              cat "$f"
            fi
          done

      - name: Build gawk app and extensions
        run: make V=0 || { ret=$?; make V=1; cat config.log; cat config.cache; exit $ret; }
        working-directory: build

      - name: Run checks
        run: make check
        working-directory: build

      - name: Run distcheck
        run: make distcheck DISTCHECK_CONFIGURE_FLAGS="--build=$(gcc -dumpmachine) -C" || { ret=$?; cat config.log; cat config.cache; exit $ret; }
        working-directory: build
